// initPocketBase_fixed.js
import PocketBase from "pocketbase";
import 'isomorphic-fetch'; // Polyfill for fetch in Node.js environment

// -------------------------------------------------------------------
// CONFIGURA√á√ÉO
// -------------------------------------------------------------------
// !! IMPORTANTE !!
// Preencha com as credenciais de um usu√°rio ADMIN que voc√™ criou
// manualmente no painel do PocketBase.
const POCKETBASE_URL = "https://mobmv.shop";
const ADMIN_EMAIL = "daniel.kokynhw@gmail.com";
const ADMIN_PASSWORD = "Dcm02061994@@";

// Inicializa a inst√¢ncia do PocketBase
const pb = new PocketBase(POCKETBASE_URL);

// -------------------------------------------------------------------
// DEFINI√á√ÉO DAS COLE√á√ïES E CAMPOS
// -------------------------------------------------------------------

// Defini√ß√£o completa do schema, incluindo as regras da API.
const collectionsDefinition = {
  users: {
    name: "users",
    type: "auth",
    schema: [
      { name: "name", type: "text", required: true },
      { name: "phone", type: "text" },
      { name: "role", type: "select", required: true, options: { values: ["Passageiro", "Motorista", "Admin", "Atendente"] } },
      // Campos de Motorista
      { name: "driver_status", type: "select", options: { values: ["Online", "Offline", "Em Viagem (Urbano)", "Em Viagem (Rural)"] } },
      { name: "driver_vehicle_model", type: "text" },
      { name: "driver_vehicle_plate", type: "text" },
      { name: "driver_vehicle_photo", type: "file", options: { maxSelect: 1 } },
      { name: "driver_cnpj", type: "text" },
      { name: "driver_pix_key", type: "text" },
      { name: "driver_fare_type", type: "select", options: { values: ["fixed", "km"] } },
      { name: "driver_fixed_rate", type: "number" },
      { name: "driver_km_rate", type: "number" },
      { name: "driver_accepts_rural", type: "bool" },
    ],
    options: {
        "emailVisibility": true,
        "allowOAuth2Auth": false,
        "allowUsernameAuth": false,
        "allowEmailAuth": true,
        "exceptEmailDomains": null,
        "onlyEmailDomains": null,
        "requireEmailVerification": false,
    },
    rules: {
      listRule: '@request.auth.id != ""',
      viewRule: 'id = @request.auth.id || @request.auth.role = "Admin" || @request.auth.role = "Atendente" || @request.auth.role = "Motorista"',
      createRule: "", // Permite que qualquer um se registre
      updateRule: 'id = @request.auth.id || @request.auth.role = "Admin"',
      deleteRule: '@request.auth.role = "Admin"',
    }
  },
  // As outras cole√ß√µes n√£o precisam ser alteradas, pois o problema principal estava na 'users'
  // Adicione aqui as outras cole√ß√µes se precisar cri√°-las do zero.
};


// -------------------------------------------------------------------
// FUN√á√ÉO PRINCIPAL (MAIN)
// -------------------------------------------------------------------
async function main() {
  try {
    // Autentica como superusu√°rio/admin
    await pb.admins.authWithPassword(ADMIN_EMAIL, ADMIN_PASSWORD);
    console.log("‚úÖ Autenticado no PocketBase como Administrador!");
  } catch (err) {
    console.error("‚ùå Falha na autentica√ß√£o do admin. Verifique ADMIN_EMAIL e ADMIN_PASSWORD em initPocketBase_corrigido.js", err.message);
    return; // Encerra o script se a autentica√ß√£o falhar
  }

  console.log("üîÑ Iniciando verifica√ß√£o e atualiza√ß√£o da cole√ß√£o 'users'...");

  try {
    // Busca a cole√ß√£o 'users' existente
    const usersCollection = await pb.collections.getOne("users");
    console.log("‚úîÔ∏è Cole√ß√£o 'users' encontrada.");

    const existingFields = new Set(usersCollection.schema.map(field => field.name));
    const fieldsToAdd = collectionsDefinition.users.schema.filter(
      field => !existingFields.has(field.name)
    );

    if (fieldsToAdd.length > 0) {
      console.log(`  - Campos faltando: ${fieldsToAdd.map(f => f.name).join(', ')}`);
      
      // Adiciona os campos que est√£o faltando ao schema existente
      const updatedSchema = [...usersCollection.schema, ...fieldsToAdd];
      
      // Atualiza a cole√ß√£o com o novo schema
      await pb.collections.update("users", { schema: updatedSchema });
      console.log("‚úÖ Campos personalizados adicionados com sucesso √† cole√ß√£o 'users'!");
    } else {
      console.log("‚úîÔ∏è A cole√ß√£o 'users' j√° possui todos os campos necess√°rios.");
    }
    
    // Atualiza as regras da API
    await pb.collections.update("users", collectionsDefinition.users.rules);
    console.log("‚úÖ Regras da API para a cole√ß√£o 'users' atualizadas com sucesso!");


  } catch (err) {
    // Erro 404 significa que a cole√ß√£o 'users' n√£o existe
    if (err.status === 404) {
      console.log("‚ö†Ô∏è Cole√ß√£o 'users' n√£o encontrada. Tentando criar do zero...");
      try {
        const usersConfig = collectionsDefinition.users;
        await pb.collections.create({
            name: usersConfig.name,
            type: usersConfig.type,
            schema: usersConfig.schema,
            ...usersConfig.rules,
            ...usersConfig.options
        });
        console.log("‚úÖ Cole√ß√£o 'users' criada com sucesso!");
      } catch (createErr) {
        console.error(`‚ùå Erro ao criar a cole√ß√£o 'users':`, createErr?.response?.data || createErr.message);
      }
    } else {
      // Outro erro ao buscar ou atualizar a cole√ß√£o
      console.error(`‚ùå Erro ao processar a cole√ß√£o 'users':`, err?.response?.data || err.message);
    }
  }

  // Voc√™ pode adicionar a l√≥gica para outras cole√ß√µes aqui se necess√°rio

  console.log("\nüéâ Script de inicializa√ß√£o conclu√≠do!");
}

// Executa a fun√ß√£o principal
main();
